local a={Endpoint="https://api.warpstore.app/api/games/1.0/",Version="2.1.0",Colors={Red="\27[91m",Blue="\27[94m",Reset="\27[0m"}}a.__index=a;function a:New()local b=setmetatable({},self)return b end;function a:ConsoleMessage(c,d,e)local f=80;if d then local g=math.floor((f-#c)/2)c=string.rep(" ",g)..c end;if not e then e=self.Colors.Blue end;print(e..c..self.Colors.Reset)end;function a:FormatDate(h)local i=h:gsub("T"," "):gsub("Z","")local j,k,l,m,n,o=i:match("(%d+)-(%d+)-(%d+) (%d+):(%d+):(%d+)")local p=string.format("%02d/%02d/%d %02d:%02d",tonumber(l),tonumber(k),tonumber(j),tonumber(m),tonumber(n))return p end;function a:Request(q,r,s)local t;local u;local v={["Authorization"]="Bearer "..Config.Warp.Token,["Content-Type"]="application/json"}PerformHttpRequest(self.Endpoint..q,function(w,x,o,y)u=w;if w>=200 and w<=300 then t=json.decode(x)return end;t=y end,r,s and json.encode(s)or nil,v)repeat Wait(100)until u;return t,u end;function a:ParseCommand(z)local A,B=z:match("^(%S+) (.+)$")local C={}for D in B:gmatch("%S+")do if D~="{userId}"then table.insert(C,D)end end;return{CommandName=A,Args=C}end;function a:ParseMessage(c,B)local function E(F)return B[F]or"%("..F..")"end;return c:gsub("%((%w+)%)",E)end;function a:Init()local t,u=self:Request("init","POST",{["serverPort"]=30120})if u~=200 then self:ConsoleMessage("O Token inserido estÃ¡ invÃ¡lido, verifique e tente novamente!",true,self.Colors.Red)return end;self:ConsoleMessage("")self:ConsoleMessage("Loja vinculada: "..t.name.." | URL: https://"..t.url,true)self:ConsoleMessage("Plano: "..t.plan.." | Expira: "..self:FormatDate(t.expirationDate),true)self:ConsoleMessage("")self:WaitCommands()end;function a:WaitCommands()Wait(200)while true do self:CommandsQueue()Wait(Config.Warp.Interval*60*1000)end end;function a:CommandsQueue()local t,u=self:Request("commands/pending-commands","GET")if u~=200 then self:ConsoleMessage("Erro ao tentar obter os comandos pedentes!",true,self.Colors.Red)return end;if t.checkouts and#t.checkouts then for o,G in pairs(t.checkouts)do local H={}local I=false;for o,J in pairs(G.products)do for o,z in pairs(J.commands)do local K=self:ParseCommand(z)for L=1,J.quantity do local M=self:DeliveryCommand(K.CommandName,G.gameUserId,K.Args)if not I and M then I=true end end end;table.insert(H,J.name)end;if I then H=table.concat(H,", ")local N=Config.Framework.GetUserName(G.gameUserId)local O=Config.Framework.GetSource(G.gameUserId)local o,u=self:Request("commands/mark-as-processed","POST",{["commandQueueId"]=G.id})if u~=200 then self:ConsoleMessage("Falha ao atualizar o pedido | Pagamento ID: "..G.checkoutId,false,self.Colors.Red)return end;if G.deliveryType=="APPROVE"then if O then TriggerClientEvent("WarpStore:DisplayingPurchase",O,N,H)if Config.Warp.Notify.Enable then local c=self:ParseMessage(Config.Warp.Notify.Message,{name=N,products=H})Config.Framework.Notify(O,c)end end;if Config.Warp.Chat.Enable then local c=self:ParseMessage(Config.Warp.Chat.Message,{name=N,products=H})Config.Framework.Chat(c)end end end end end end;function a:DeliveryCommand(A,P,B)if not Commands[A]then self:ConsoleMessage("NÃ£o conseguimos encontrar o comando "..A,false,self.Colors.Red)return false end;local Q,R=pcall(Commands[A],P,B)if not Q then self:ConsoleMessage("Erro ao processar o comando "..A.." | Erro: "..R,false,self.Colors.Red)return false end;return true end;CreateThread(function()local S=a:New()S:ConsoleMessage("")S:ConsoleMessage(" __        ___    ____  ____    ____ _____ ___  ____  _____ ",true)S:ConsoleMessage(" \\ \\      / / \\  |  _ \\|  _ \\  / ___|_   _/ _ \\|  _ \\| ____|",true)S:ConsoleMessage("  \\ \\ /\\ / / _ \\ | |_) | |_) | \\___ \\ | || | | | |_) |  _|  ",true)S:ConsoleMessage("   \\ V  V / ___ \\|  _ <|  __/   ___) || || |_| |  _ <| |___ ",true)S:ConsoleMessage("    \\_/\\_/_/   \\_\\_| \\_\\_|     |____/ |_| \\___/|_| \\_\\_____|",true)S:ConsoleMessage("                                                            ",true)S:ConsoleMessage("warpstore.app | Monetize seu servidor de FiveM e Impulsione suas vendas!",true)S:ConsoleMessage("VersÃ£o "..S.Version,true)S:Init()end)